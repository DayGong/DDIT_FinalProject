<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customLoginFailure" class="kr.or.ddit.security.CustomLoginFailureHandler"></bean>
	<bean id="customAccessDenied" class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
	<bean id="customLogoutSuccess" class="kr.or.ddit.security.CustomLogoutSuccessHandler"></bean>
	
	<!-- 비밀번호를 암호화 사용 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<!-- 사용자가 이미 정해놓은 테이블과 컬럼명으로 로그인 처리를 해보자(로그인 정합성 체크) -->
	<bean id="customUserDetailsService" class="kr.or.ddit.security.CustomUserDetailsService"></bean>

	<security:http>
		<!-- 
			폼 기반 인증 기능 사용(인증-authentication을 위해서 아이디/비밀번호를 체크)
			사용자 정의 로그인 페이지의 URI 지정
			로그인 성공 처리자  ref : bean을 바라봄
		-->
		<security:form-login login-page="/login"  authentication-success-handler-ref="customLoginSuccess" 
							authentication-failure-handler-ref="customLoginFailure"/>
		
		<!-- 접근 거부가 발생한 상황에 단순 메시지 처리 이상의 다양한 처리를 하고자 할 때 사용자가 직접 구현할 수 있음 -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화 함 -->
		<!-- 로그아웃을 하면 자동 로그인에 사용된 쿠키도 함께 삭제해 줌  invalidate-session="true"-->
		<security:logout logout-url="/logout" invalidate-session="true" success-handler-ref="customLogoutSuccess"/>
	
		<!-- 네이버 스마트 에디터 사용을 위한 시큐리티 설정 -->
		<security:headers>
			<security:frame-options policy="SAMEORIGIN"/>
		</security:headers>
	</security:http>
	
	<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정-->
	<!-- 
		스프링 시큐리니티 5부터 기본적으로 PasswordEncoder를 지정해야 하는데, 그 이유는 사용자 테이블(USERS)에 비밀번호를 암호화하여 저장해야 하므로.
		우리는 우선 비밀번호를 암호화 처리 하지 않았으므로 암호화 하지 않는 PasswordEncoder를 직접 구현하여 지정하기로 함
		noop : no option password
	-->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 비밀번호 암호화 씀 -->
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
</beans>	



